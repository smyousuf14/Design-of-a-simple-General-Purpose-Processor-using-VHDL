library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity alu3 is
port (clock : in std_logic;
		a,b : in unsigned(7 downto 0);
	   student_id: in unsigned (3 downto 0); 
	   op: in unsigned (15 downto 0);
	   neg: out std_logic;
	   r1: out unsigned (3 downto 0);
	   r2: out unsigned (3 downto 0)); 
end alu3;

architecture calculation of alu3 is 
signal reg1,reg2, result: unsigned(7 downto 0):= (others => '0');
signal reg4: unsigned (0 to 7);
begin 
reg1 <= a;
reg2 <= b;

process(clock,op)
begin 
	if(rising_edge(clock)) then 
	
	neg <= '0';
		case op is 
			when "0000000000000001" =>
				result <= reg1 + reg2;
				
			when "0000000000000010" =>
				if (reg1 < reg2) then
				
				neg <= '1';
				
				reg4 <= not(reg2) + "00000001";
				
				result <= reg1 + reg4;
				
			 else 
			
				result <= reg1 - reg2;
			end if;
			
		    when "0000000000000100" =>
			
				result <= not(reg1);
				
			when "0000000000001000" =>
				
				result <= not(reg1 and reg2);
				
			when "0000000000010000" =>
			
				result <= not(reg1 or reg2);
			
			when "0000000000100000" =>
			
				result <= reg1 and reg2;
				
			when "0000000001000000" =>
			
				result <= reg1 xor reg2;
				
			when "0000000010000000" =>
			
				result <= reg1 or reg2;
				
			when "0000000100000000" =>
			
			result <= reg1 xnor reg2;
			
			when others => result <= result;
			end case;
			
			end if;
			end process;
			
			r1 <= result(3 downto 0);
			r2 <= result(7 downto 4);
			
end calculation;

 